
STM32F446xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ae4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ca8  08000ca8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ca8  08000ca8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000ca8  08000ca8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ca8  08000ca8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ca8  08000ca8  00001ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cac  08000cac  00001cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000cb0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08000cb4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000cb4  00002074  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001201  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000519  00000000  00000000  0000322f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00003748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000106  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002321  00000000  00000000  000039be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018c4  00000000  00000000  00005cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009730  00000000  00000000  000075a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00010cd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c0  00000000  00000000  00010d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000c90 	.word	0x08000c90

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000c90 	.word	0x08000c90

08000204 <init_scheduler_stack>:
 * @return							-None
 *
 */

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_stack_start)
{
 8000204:	4603      	mov	r3, r0
	__asm volatile("MSR  MSP,%0": : "r"  (scheduler_stack_start) : ); //Copy start value to MSP
 8000206:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR"); //Write it to return since there is not epilogue
 800020a:	4770      	bx	lr
}
 800020c:	bf00      	nop
	...

08000210 <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	uint32_t count_value = SYSTIM_TIM_CLK / tick_hz; // This is the reload value
 8000218:	4a13      	ldr	r2, [pc, #76]	@ (8000268 <init_systick_timer+0x58>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000220:	60fb      	str	r3, [r7, #12]

	/* Clear RVR */
	*SYST_RVR &= ~(0xFFFFFFFF);
 8000222:	4b12      	ldr	r3, [pc, #72]	@ (800026c <init_systick_timer+0x5c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4b11      	ldr	r3, [pc, #68]	@ (800026c <init_systick_timer+0x5c>)
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]

	/* Load the value into SysTick Reload Value Register */
	*SYST_RVR |= (count_value - 1); // Reload value should be N-1, Example: 16000 - 1
 800022c:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <init_systick_timer+0x5c>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	3b01      	subs	r3, #1
 8000234:	490d      	ldr	r1, [pc, #52]	@ (800026c <init_systick_timer+0x5c>)
 8000236:	4313      	orrs	r3, r2
 8000238:	600b      	str	r3, [r1, #0]

	/* SysTick Setting in SysTick Control and Status Register */
	/* Enabling Systick exception request */
	*SYST_CSR |= ( 1 << TICKINT_BIT );
 800023a:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <init_systick_timer+0x60>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a0c      	ldr	r2, [pc, #48]	@ (8000270 <init_systick_timer+0x60>)
 8000240:	f043 0302 	orr.w	r3, r3, #2
 8000244:	6013      	str	r3, [r2, #0]
	/* Selecting processor clock */
	*SYST_CSR |= ( 1 << CLKSOURCE_BIT );
 8000246:	4b0a      	ldr	r3, [pc, #40]	@ (8000270 <init_systick_timer+0x60>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a09      	ldr	r2, [pc, #36]	@ (8000270 <init_systick_timer+0x60>)
 800024c:	f043 0304 	orr.w	r3, r3, #4
 8000250:	6013      	str	r3, [r2, #0]

	/* Enabling SysTick timer */
	*SYST_CSR |= ( 1 << SYSTICK_ENABLE_BIT);
 8000252:	4b07      	ldr	r3, [pc, #28]	@ (8000270 <init_systick_timer+0x60>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a06      	ldr	r2, [pc, #24]	@ (8000270 <init_systick_timer+0x60>)
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	6013      	str	r3, [r2, #0]
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	00f42400 	.word	0x00f42400
 800026c:	e000e014 	.word	0xe000e014
 8000270:	e000e010 	.word	0xe000e010

08000274 <init_tasks_stack>:
 * @param			- None
 *
 * @return			-None
 */
void init_tasks_stack(void)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
	/* Setting initial tasks state */
	user_tasks[0].current_state = TASK_RUNNING_STATE;
 800027a:	4b3a      	ldr	r3, [pc, #232]	@ (8000364 <init_tasks_stack+0xf0>)
 800027c:	2200      	movs	r2, #0
 800027e:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 8000280:	4b38      	ldr	r3, [pc, #224]	@ (8000364 <init_tasks_stack+0xf0>)
 8000282:	2200      	movs	r2, #0
 8000284:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 8000286:	4b37      	ldr	r3, [pc, #220]	@ (8000364 <init_tasks_stack+0xf0>)
 8000288:	2200      	movs	r2, #0
 800028a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 800028e:	4b35      	ldr	r3, [pc, #212]	@ (8000364 <init_tasks_stack+0xf0>)
 8000290:	2200      	movs	r2, #0
 8000292:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	user_tasks[4].current_state = TASK_RUNNING_STATE;
 8000296:	4b33      	ldr	r3, [pc, #204]	@ (8000364 <init_tasks_stack+0xf0>)
 8000298:	2200      	movs	r2, #0
 800029a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	/* Setting initial PSP values for tasks */
	user_tasks[0].psp_value = IDLE_STACK_START;
 800029e:	4b31      	ldr	r3, [pc, #196]	@ (8000364 <init_tasks_stack+0xf0>)
 80002a0:	4a31      	ldr	r2, [pc, #196]	@ (8000368 <init_tasks_stack+0xf4>)
 80002a2:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 80002a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000364 <init_tasks_stack+0xf0>)
 80002a6:	4a31      	ldr	r2, [pc, #196]	@ (800036c <init_tasks_stack+0xf8>)
 80002a8:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 80002aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000364 <init_tasks_stack+0xf0>)
 80002ac:	4a30      	ldr	r2, [pc, #192]	@ (8000370 <init_tasks_stack+0xfc>)
 80002ae:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 80002b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000364 <init_tasks_stack+0xf0>)
 80002b2:	4a30      	ldr	r2, [pc, #192]	@ (8000374 <init_tasks_stack+0x100>)
 80002b4:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 80002b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000364 <init_tasks_stack+0xf0>)
 80002b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000378 <init_tasks_stack+0x104>)
 80002ba:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Init handlers pointers for tasks */
	user_tasks[0].task_handler = idle_task;
 80002bc:	4b29      	ldr	r3, [pc, #164]	@ (8000364 <init_tasks_stack+0xf0>)
 80002be:	4a2f      	ldr	r2, [pc, #188]	@ (800037c <init_tasks_stack+0x108>)
 80002c0:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 80002c2:	4b28      	ldr	r3, [pc, #160]	@ (8000364 <init_tasks_stack+0xf0>)
 80002c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000380 <init_tasks_stack+0x10c>)
 80002c6:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 80002c8:	4b26      	ldr	r3, [pc, #152]	@ (8000364 <init_tasks_stack+0xf0>)
 80002ca:	4a2e      	ldr	r2, [pc, #184]	@ (8000384 <init_tasks_stack+0x110>)
 80002cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = task3_handler;
 80002ce:	4b25      	ldr	r3, [pc, #148]	@ (8000364 <init_tasks_stack+0xf0>)
 80002d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000388 <init_tasks_stack+0x114>)
 80002d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = task4_handler;
 80002d4:	4b23      	ldr	r3, [pc, #140]	@ (8000364 <init_tasks_stack+0xf0>)
 80002d6:	4a2d      	ldr	r2, [pc, #180]	@ (800038c <init_tasks_stack+0x118>)
 80002d8:	64da      	str	r2, [r3, #76]	@ 0x4c

	uint32_t *pPSP;

	for(unsigned char i = 0; i < MAX_TASKS; i++)
 80002da:	2300      	movs	r3, #0
 80002dc:	70fb      	strb	r3, [r7, #3]
 80002de:	e037      	b.n	8000350 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t *) user_tasks[i].psp_value; // Point o the task PSP
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	4a20      	ldr	r2, [pc, #128]	@ (8000364 <init_tasks_stack+0xf0>)
 80002e4:	011b      	lsls	r3, r3, #4
 80002e6:	4413      	add	r3, r2
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	607b      	str	r3, [r7, #4]

		pPSP--; //Decrement stack position
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3b04      	subs	r3, #4
 80002f0:	607b      	str	r3, [r7, #4]
		*pPSP = DUMMY_XPSR; // Saving XPSR value
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002f8:	601a      	str	r2, [r3, #0]

		pPSP--; //Decrement stack position
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3b04      	subs	r3, #4
 80002fe:	607b      	str	r3, [r7, #4]
		*pPSP = (uint32_t) user_tasks[i].task_handler; // Saving task handler
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	4a18      	ldr	r2, [pc, #96]	@ (8000364 <init_tasks_stack+0xf0>)
 8000304:	011b      	lsls	r3, r3, #4
 8000306:	4413      	add	r3, r2
 8000308:	330c      	adds	r3, #12
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	601a      	str	r2, [r3, #0]

		pPSP--; //Decrement stack position
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3b04      	subs	r3, #4
 8000316:	607b      	str	r3, [r7, #4]
		*pPSP = EXC_RETURN; // Saving LR with special value
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f06f 0202 	mvn.w	r2, #2
 800031e:	601a      	str	r2, [r3, #0]

		for(unsigned char j = 0; j < 13; j++)
 8000320:	2300      	movs	r3, #0
 8000322:	70bb      	strb	r3, [r7, #2]
 8000324:	e008      	b.n	8000338 <init_tasks_stack+0xc4>
		{
			pPSP--; //Decrement stack position
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3b04      	subs	r3, #4
 800032a:	607b      	str	r3, [r7, #4]
			*pPSP = 0; // Initializing with 0 General register x
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
		for(unsigned char j = 0; j < 13; j++)
 8000332:	78bb      	ldrb	r3, [r7, #2]
 8000334:	3301      	adds	r3, #1
 8000336:	70bb      	strb	r3, [r7, #2]
 8000338:	78bb      	ldrb	r3, [r7, #2]
 800033a:	2b0c      	cmp	r3, #12
 800033c:	d9f3      	bls.n	8000326 <init_tasks_stack+0xb2>
		}
		user_tasks[i].psp_value = (uint32_t) pPSP;
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4908      	ldr	r1, [pc, #32]	@ (8000364 <init_tasks_stack+0xf0>)
 8000344:	011b      	lsls	r3, r3, #4
 8000346:	440b      	add	r3, r1
 8000348:	601a      	str	r2, [r3, #0]
	for(unsigned char i = 0; i < MAX_TASKS; i++)
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	3301      	adds	r3, #1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2b04      	cmp	r3, #4
 8000354:	d9c4      	bls.n	80002e0 <init_tasks_stack+0x6c>
	}

}
 8000356:	bf00      	nop
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000020 	.word	0x20000020
 8000368:	2001f000 	.word	0x2001f000
 800036c:	20020000 	.word	0x20020000
 8000370:	2001fc00 	.word	0x2001fc00
 8000374:	2001f800 	.word	0x2001f800
 8000378:	2001f400 	.word	0x2001f400
 800037c:	08000bdd 	.word	0x08000bdd
 8000380:	08000b8d 	.word	0x08000b8d
 8000384:	08000ba1 	.word	0x08000ba1
 8000388:	08000bb5 	.word	0x08000bb5
 800038c:	08000bc9 	.word	0x08000bc9

08000390 <switch_sp_to_psp>:
 * */
__attribute__((naked)) void switch_sp_to_psp(void)
{
	/* Initialize the PSP with TASK1 stack start address */
	// Get value of PSP of current task
	__asm volatile ("PUSH {LR}"); // Saving LR before calling function get PSP value
 8000390:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value"); // Call function with Branch with Link, By standard return value is stored in R0
 8000392:	f000 f80b 	bl	80003ac <get_psp_value>
	__asm volatile ("MSR PSP, R0"); // Copy R0 value (current task psp) to PSP register
 8000396:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); // Restoring LR value
 800039a:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Change SP to PSP using CONTROL Register */
	__asm volatile ("MOV R0, #0X02");
 800039e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 80003a2:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80003a6:	4770      	bx	lr
}
 80003a8:	bf00      	nop
	...

080003ac <get_psp_value>:
 * @param		- None
 *
 * @return		- Current PSP value
 * */
uint32_t get_psp_value(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 80003b0:	4b04      	ldr	r3, [pc, #16]	@ (80003c4 <get_psp_value+0x18>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	4a04      	ldr	r2, [pc, #16]	@ (80003c8 <get_psp_value+0x1c>)
 80003b6:	011b      	lsls	r3, r3, #4
 80003b8:	4413      	add	r3, r2
 80003ba:	681b      	ldr	r3, [r3, #0]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000020 	.word	0x20000020

080003cc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	update_global_tick_count();
 80003d0:	f000 f80c 	bl	80003ec <update_global_tick_count>
	unblock_tasks();
 80003d4:	f000 f818 	bl	8000408 <unblock_tasks>
	// Pend the PENDSV exception
	*ICSR |= (1 << PENDSVSET_BIT);
 80003d8:	4b03      	ldr	r3, [pc, #12]	@ (80003e8 <SysTick_Handler+0x1c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a02      	ldr	r2, [pc, #8]	@ (80003e8 <SysTick_Handler+0x1c>)
 80003de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	e000ed04 	.word	0xe000ed04

080003ec <update_global_tick_count>:

void update_global_tick_count(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	g_tick_count++;
 80003f0:	4b04      	ldr	r3, [pc, #16]	@ (8000404 <update_global_tick_count+0x18>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a03      	ldr	r2, [pc, #12]	@ (8000404 <update_global_tick_count+0x18>)
 80003f8:	6013      	str	r3, [r2, #0]
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000070 	.word	0x20000070

08000408 <unblock_tasks>:
 * @param		- None
 *
 * @return		- None
 */
void unblock_tasks(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
	for(unsigned char i = 1; i < MAX_TASKS; i++)
 800040e:	2301      	movs	r3, #1
 8000410:	71fb      	strb	r3, [r7, #7]
 8000412:	e01b      	b.n	800044c <unblock_tasks+0x44>
	{
		/* Check if the task is not running and if its blocked */
		if(user_tasks[i].current_state != TASK_RUNNING_STATE)
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4a12      	ldr	r2, [pc, #72]	@ (8000460 <unblock_tasks+0x58>)
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	4413      	add	r3, r2
 800041c:	3308      	adds	r3, #8
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d010      	beq.n	8000446 <unblock_tasks+0x3e>
		{
			/* Check if the task has reached the unblock time */
			if(user_tasks[i].block_count == g_tick_count)
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4a0e      	ldr	r2, [pc, #56]	@ (8000460 <unblock_tasks+0x58>)
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	4413      	add	r3, r2
 800042c:	3304      	adds	r3, #4
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <unblock_tasks+0x5c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	429a      	cmp	r2, r3
 8000436:	d106      	bne.n	8000446 <unblock_tasks+0x3e>
			{
				/* Unblock the task and set its state to running */
				user_tasks[i].current_state = TASK_RUNNING_STATE;
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	4a09      	ldr	r2, [pc, #36]	@ (8000460 <unblock_tasks+0x58>)
 800043c:	011b      	lsls	r3, r3, #4
 800043e:	4413      	add	r3, r2
 8000440:	3308      	adds	r3, #8
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
	for(unsigned char i = 1; i < MAX_TASKS; i++)
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	3301      	adds	r3, #1
 800044a:	71fb      	strb	r3, [r7, #7]
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b04      	cmp	r3, #4
 8000450:	d9e0      	bls.n	8000414 <unblock_tasks+0xc>
			}
		}
	}
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000020 	.word	0x20000020
 8000464:	20000070 	.word	0x20000070

08000468 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void)
{
	/* Save the context of current task */
	// 1. Get current running task's PSP value
	__asm volatile ("MRS R0, PSP");
 8000468:	f3ef 8009 	mrs	r0, PSP
	// 2. Using that PSP value STORE SF2 ( R4 - R11 )
	__asm volatile ("STMDB R0!, {R4,R11}");
 800046c:	e920 0810 	stmdb	r0!, {r4, fp}

	__asm volatile ("PUSH {LR}"); // Saving LR before calling function Save psp value
 8000470:	b500      	push	{lr}

	__asm volatile ("BL save_psp_value"); 	// Is not necessary to put the PSP value as a parameter because R0 already has that value,
 8000472:	f000 f80d 	bl	8000490 <save_psp_value>
											// When save_psp_value is called, R0 value is passed  as parameter, this because to the Procedure Call Standard


	/* Retrieve the context of the next task */
	// 1. Decide next task to run
	__asm volatile ("BL update_next_task");
 8000476:	f000 f81f 	bl	80004b8 <update_next_task>

	// 2. Get its past PSP value
	__asm volatile ("BL get_psp_value"); // PSP value is returned  in R0 by standard
 800047a:	f7ff ff97 	bl	80003ac <get_psp_value>

	// 3. Using that PSP value to retrieve SF2 (R4 - R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 800047e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 4. Update PSP and Exit
	__asm volatile ("MSR PSP, R0");
 8000482:	f380 8809 	msr	PSP, r0

	//  5. Restore LR value (0xFFFFFFFD) from stack
	__asm volatile ("POP {LR}");
 8000486:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("BX LR");
 800048a:	4770      	bx	lr
}
 800048c:	bf00      	nop
	...

08000490 <save_psp_value>:
 * @param		- PSP value to save.
 *
 * @return		- None
 */
void save_psp_value(uint32_t current_psp_value)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <save_psp_value+0x20>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	4a05      	ldr	r2, [pc, #20]	@ (80004b4 <save_psp_value+0x24>)
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	4413      	add	r3, r2
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000020 	.word	0x20000020

080004b8 <update_next_task>:

void update_next_task(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
	uint8_t state = TASK_BLOCKED_STATE;
 80004be:	23ff      	movs	r3, #255	@ 0xff
 80004c0:	71fb      	strb	r3, [r7, #7]

	for(unsigned char i = 0; i < MAX_TASKS; i++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	71bb      	strb	r3, [r7, #6]
 80004c6:	e01e      	b.n	8000506 <update_next_task+0x4e>
	{
		/* Move to the next task in the round-robin queue */
		current_task++;
 80004c8:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <update_next_task+0x70>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <update_next_task+0x70>)
 80004d2:	701a      	strb	r2, [r3, #0]

		if(current_task == MAX_TASKS)
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <update_next_task+0x70>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b05      	cmp	r3, #5
 80004da:	d102      	bne.n	80004e2 <update_next_task+0x2a>
		{
			current_task = 0;
 80004dc:	4b12      	ldr	r3, [pc, #72]	@ (8000528 <update_next_task+0x70>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
		}

		/* Check the state of the next task */
		state = user_tasks[current_task].current_state;
 80004e2:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <update_next_task+0x70>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4a11      	ldr	r2, [pc, #68]	@ (800052c <update_next_task+0x74>)
 80004e8:	011b      	lsls	r3, r3, #4
 80004ea:	4413      	add	r3, r2
 80004ec:	3308      	adds	r3, #8
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	71fb      	strb	r3, [r7, #7]

		/* Select the task if it is runnable and not the idle task (task 0) */
		if( (state == TASK_RUNNING_STATE) && (current_task != 0) )
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d103      	bne.n	8000500 <update_next_task+0x48>
 80004f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000528 <update_next_task+0x70>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d106      	bne.n	800050e <update_next_task+0x56>
	for(unsigned char i = 0; i < MAX_TASKS; i++)
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	3301      	adds	r3, #1
 8000504:	71bb      	strb	r3, [r7, #6]
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	2b04      	cmp	r3, #4
 800050a:	d9dd      	bls.n	80004c8 <update_next_task+0x10>
 800050c:	e000      	b.n	8000510 <update_next_task+0x58>
		{
			break;
 800050e:	bf00      	nop
		}
	}
	/* Go to idle task if no other task is runnable */
	if(state != TASK_RUNNING_STATE)
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <update_next_task+0x64>
	{
		current_task = 0;
 8000516:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <update_next_task+0x70>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	}
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000000 	.word	0x20000000
 800052c:	20000020 	.word	0x20000020

08000530 <GPIO_BASEADDR_TO_CODE>:
#define DISABLE 0
#define ENABLE  1


static inline uint8_t GPIO_BASEADDR_TO_CODE(GPIO_Reg_Def_t *pGPIOx)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	if       (pGPIOx == GPIOA) return 0;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a1a      	ldr	r2, [pc, #104]	@ (80005a4 <GPIO_BASEADDR_TO_CODE+0x74>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d101      	bne.n	8000544 <GPIO_BASEADDR_TO_CODE+0x14>
 8000540:	2300      	movs	r3, #0
 8000542:	e02a      	b.n	800059a <GPIO_BASEADDR_TO_CODE+0x6a>
	else if  (pGPIOx == GPIOB) return 1;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <GPIO_BASEADDR_TO_CODE+0x78>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d101      	bne.n	8000550 <GPIO_BASEADDR_TO_CODE+0x20>
 800054c:	2301      	movs	r3, #1
 800054e:	e024      	b.n	800059a <GPIO_BASEADDR_TO_CODE+0x6a>
	else if  (pGPIOx == GPIOC) return 2;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a16      	ldr	r2, [pc, #88]	@ (80005ac <GPIO_BASEADDR_TO_CODE+0x7c>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d101      	bne.n	800055c <GPIO_BASEADDR_TO_CODE+0x2c>
 8000558:	2302      	movs	r3, #2
 800055a:	e01e      	b.n	800059a <GPIO_BASEADDR_TO_CODE+0x6a>
	else if  (pGPIOx == GPIOD) return 3;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <GPIO_BASEADDR_TO_CODE+0x80>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d101      	bne.n	8000568 <GPIO_BASEADDR_TO_CODE+0x38>
 8000564:	2303      	movs	r3, #3
 8000566:	e018      	b.n	800059a <GPIO_BASEADDR_TO_CODE+0x6a>
	else if  (pGPIOx == GPIOE) return 4;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <GPIO_BASEADDR_TO_CODE+0x84>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d101      	bne.n	8000574 <GPIO_BASEADDR_TO_CODE+0x44>
 8000570:	2304      	movs	r3, #4
 8000572:	e012      	b.n	800059a <GPIO_BASEADDR_TO_CODE+0x6a>
	else if  (pGPIOx == GPIOF) return 5;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a10      	ldr	r2, [pc, #64]	@ (80005b8 <GPIO_BASEADDR_TO_CODE+0x88>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d101      	bne.n	8000580 <GPIO_BASEADDR_TO_CODE+0x50>
 800057c:	2305      	movs	r3, #5
 800057e:	e00c      	b.n	800059a <GPIO_BASEADDR_TO_CODE+0x6a>
	else if  (pGPIOx == GPIOG) return 6;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <GPIO_BASEADDR_TO_CODE+0x8c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d101      	bne.n	800058c <GPIO_BASEADDR_TO_CODE+0x5c>
 8000588:	2306      	movs	r3, #6
 800058a:	e006      	b.n	800059a <GPIO_BASEADDR_TO_CODE+0x6a>
	else if  (pGPIOx == GPIOH) return 7;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a0c      	ldr	r2, [pc, #48]	@ (80005c0 <GPIO_BASEADDR_TO_CODE+0x90>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d101      	bne.n	8000598 <GPIO_BASEADDR_TO_CODE+0x68>
 8000594:	2307      	movs	r3, #7
 8000596:	e000      	b.n	800059a <GPIO_BASEADDR_TO_CODE+0x6a>
	else                       return 0;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	40020000 	.word	0x40020000
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020800 	.word	0x40020800
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40021400 	.word	0x40021400
 80005bc:	40021800 	.word	0x40021800
 80005c0:	40021c00 	.word	0x40021c00

080005c4 <GPIO_PeriClockControl>:
 *
 * @return            -None
 * */

void GPIO_PeriClockControl(GPIO_Reg_Def_t *pGPIOx, uint8_t EnorDi)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d157      	bne.n	8000686 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a59      	ldr	r2, [pc, #356]	@ (8000740 <GPIO_PeriClockControl+0x17c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PERI_CLOCK_ENABLE();
 80005de:	4b59      	ldr	r3, [pc, #356]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a58      	ldr	r2, [pc, #352]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
		{
			GPIOH_PERI_CLOCK_DISABLE();
		}
	}

}
 80005ea:	e0a3      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a56      	ldr	r2, [pc, #344]	@ (8000748 <GPIO_PeriClockControl+0x184>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <GPIO_PeriClockControl+0x3e>
			GPIOB_PERI_CLOCK_ENABLE();
 80005f4:	4b53      	ldr	r3, [pc, #332]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	4a52      	ldr	r2, [pc, #328]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80005fa:	f043 0302 	orr.w	r3, r3, #2
 80005fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000600:	e098      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a51      	ldr	r2, [pc, #324]	@ (800074c <GPIO_PeriClockControl+0x188>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <GPIO_PeriClockControl+0x54>
			GPIOC_PERI_CLOCK_ENABLE();
 800060a:	4b4e      	ldr	r3, [pc, #312]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a4d      	ldr	r2, [pc, #308]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000616:	e08d      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a4d      	ldr	r2, [pc, #308]	@ (8000750 <GPIO_PeriClockControl+0x18c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClockControl+0x6a>
			GPIOD_PERI_CLOCK_ENABLE();
 8000620:	4b48      	ldr	r3, [pc, #288]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a47      	ldr	r2, [pc, #284]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800062c:	e082      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a48      	ldr	r2, [pc, #288]	@ (8000754 <GPIO_PeriClockControl+0x190>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClockControl+0x80>
			GPIOE_PERI_CLOCK_ENABLE();
 8000636:	4b43      	ldr	r3, [pc, #268]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a42      	ldr	r2, [pc, #264]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800063c:	f043 0310 	orr.w	r3, r3, #16
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000642:	e077      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a44      	ldr	r2, [pc, #272]	@ (8000758 <GPIO_PeriClockControl+0x194>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0x96>
			GPIOF_PERI_CLOCK_ENABLE();
 800064c:	4b3d      	ldr	r3, [pc, #244]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000650:	4a3c      	ldr	r2, [pc, #240]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000658:	e06c      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a3f      	ldr	r2, [pc, #252]	@ (800075c <GPIO_PeriClockControl+0x198>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClockControl+0xac>
			GPIOG_PERI_CLOCK_ENABLE();
 8000662:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a37      	ldr	r2, [pc, #220]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800066e:	e061      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a3b      	ldr	r2, [pc, #236]	@ (8000760 <GPIO_PeriClockControl+0x19c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d15d      	bne.n	8000734 <GPIO_PeriClockControl+0x170>
			GPIOH_PERI_CLOCK_ENABLE();
 8000678:	4b32      	ldr	r3, [pc, #200]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a31      	ldr	r2, [pc, #196]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800067e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000684:	e056      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a2d      	ldr	r2, [pc, #180]	@ (8000740 <GPIO_PeriClockControl+0x17c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0xd8>
			GPIOA_PERI_CLOCK_DISABLE();
 800068e:	4b2d      	ldr	r3, [pc, #180]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a2c      	ldr	r2, [pc, #176]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000694:	f023 0301 	bic.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800069a:	e04b      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a2a      	ldr	r2, [pc, #168]	@ (8000748 <GPIO_PeriClockControl+0x184>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0xee>
			GPIOB_PERI_CLOCK_DISABLE();
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a8:	4a26      	ldr	r2, [pc, #152]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006aa:	f023 0302 	bic.w	r3, r3, #2
 80006ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006b0:	e040      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a25      	ldr	r2, [pc, #148]	@ (800074c <GPIO_PeriClockControl+0x188>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClockControl+0x104>
			GPIOC_PERI_CLOCK_DISABLE();
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006c0:	f023 0304 	bic.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c6:	e035      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <GPIO_PeriClockControl+0x18c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d106      	bne.n	80006de <GPIO_PeriClockControl+0x11a>
			GPIOD_PERI_CLOCK_DISABLE();
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006d6:	f023 0308 	bic.w	r3, r3, #8
 80006da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006dc:	e02a      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000754 <GPIO_PeriClockControl+0x190>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d106      	bne.n	80006f4 <GPIO_PeriClockControl+0x130>
			GPIOE_PERI_CLOCK_DISABLE();
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006ec:	f023 0310 	bic.w	r3, r3, #16
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006f2:	e01f      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <GPIO_PeriClockControl+0x194>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d106      	bne.n	800070a <GPIO_PeriClockControl+0x146>
			GPIOF_PERI_CLOCK_DISABLE();
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000700:	4a10      	ldr	r2, [pc, #64]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000702:	f023 0320 	bic.w	r3, r3, #32
 8000706:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000708:	e014      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a13      	ldr	r2, [pc, #76]	@ (800075c <GPIO_PeriClockControl+0x198>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_PeriClockControl+0x15c>
			GPIOG_PERI_CLOCK_DISABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 8000718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800071e:	e009      	b.n	8000734 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <GPIO_PeriClockControl+0x19c>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d105      	bne.n	8000734 <GPIO_PeriClockControl+0x170>
			GPIOH_PERI_CLOCK_DISABLE();
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072c:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <GPIO_PeriClockControl+0x180>)
 800072e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000732:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40020000 	.word	0x40020000
 8000744:	40023800 	.word	0x40023800
 8000748:	40020400 	.word	0x40020400
 800074c:	40020800 	.word	0x40020800
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40021000 	.word	0x40021000
 8000758:	40021400 	.word	0x40021400
 800075c:	40021800 	.word	0x40021800
 8000760:	40021c00 	.word	0x40021c00

08000764 <GPIO_Init>:
 *
 * @return                 -None
 * */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
	//1.- Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d820      	bhi.n	80007ba <GPIO_Init+0x56>
	{
		//temp = (config << position)
		//temp = (PinMode << PinNumber)
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Example (Output 1) << (2 * (PinNumber 2)) = 4 so (1 << 4)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	461a      	mov	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->GPIOx_MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clear first
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	2103      	movs	r1, #3
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	43db      	mvns	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	400a      	ands	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->GPIOx_MODER |= temp;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6819      	ldr	r1, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e0d7      	b.n	800096a <GPIO_Init+0x206>
	}
	else
	{
		temp = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
		//EXTI
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	795b      	ldrb	r3, [r3, #5]
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d130      	bne.n	8000828 <GPIO_Init+0xc4>
		{
			temp = (GPIO_MODE_INPUT << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->GPIOx_MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clear first
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	2103      	movs	r1, #3
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	43db      	mvns	r3, r3
 80007de:	4619      	mov	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	400a      	ands	r2, r1
 80007e6:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->GPIOx_MODER |= temp;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6819      	ldr	r1, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
			//1.- Configure the FTSR
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <GPIO_Init+0x130>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	7912      	ldrb	r2, [r2, #4]
 8000800:	4611      	mov	r1, r2
 8000802:	2201      	movs	r2, #1
 8000804:	408a      	lsls	r2, r1
 8000806:	4611      	mov	r1, r2
 8000808:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <GPIO_Init+0x130>)
 800080a:	430b      	orrs	r3, r1
 800080c:	60d3      	str	r3, [r2, #12]
			//2.- Clear RTSR
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <GPIO_Init+0x130>)
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	7912      	ldrb	r2, [r2, #4]
 8000816:	4611      	mov	r1, r2
 8000818:	2201      	movs	r2, #1
 800081a:	408a      	lsls	r2, r1
 800081c:	43d2      	mvns	r2, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <GPIO_Init+0x130>)
 8000822:	400b      	ands	r3, r1
 8000824:	6093      	str	r3, [r2, #8]
 8000826:	e06a      	b.n	80008fe <GPIO_Init+0x19a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	795b      	ldrb	r3, [r3, #5]
 800082c:	2b05      	cmp	r3, #5
 800082e:	d133      	bne.n	8000898 <GPIO_Init+0x134>
		{
			temp = (GPIO_MODE_INPUT << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->GPIOx_MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clear first
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2103      	movs	r1, #3
 8000842:	fa01 f303 	lsl.w	r3, r1, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	4619      	mov	r1, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	400a      	ands	r2, r1
 8000850:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->GPIOx_MODER |= temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6819      	ldr	r1, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	430a      	orrs	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
			//1.- Configure the RTSR
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <GPIO_Init+0x130>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	7912      	ldrb	r2, [r2, #4]
 800086a:	4611      	mov	r1, r2
 800086c:	2201      	movs	r2, #1
 800086e:	408a      	lsls	r2, r1
 8000870:	4611      	mov	r1, r2
 8000872:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <GPIO_Init+0x130>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6093      	str	r3, [r2, #8]
			//2.- Clear FTSR
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <GPIO_Init+0x130>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	7912      	ldrb	r2, [r2, #4]
 8000880:	4611      	mov	r1, r2
 8000882:	2201      	movs	r2, #1
 8000884:	408a      	lsls	r2, r1
 8000886:	43d2      	mvns	r2, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a02      	ldr	r2, [pc, #8]	@ (8000894 <GPIO_Init+0x130>)
 800088c:	400b      	ands	r3, r1
 800088e:	60d3      	str	r3, [r2, #12]
 8000890:	e035      	b.n	80008fe <GPIO_Init+0x19a>
 8000892:	bf00      	nop
 8000894:	40013c00 	.word	0x40013c00
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT_RT)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	795b      	ldrb	r3, [r3, #5]
 800089c:	2b06      	cmp	r3, #6
 800089e:	d12e      	bne.n	80008fe <GPIO_Init+0x19a>
		{
			temp = (GPIO_MODE_INPUT << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->GPIOx_MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clear first
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2103      	movs	r1, #3
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	4619      	mov	r1, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	400a      	ands	r2, r1
 80008c0:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->GPIOx_MODER |= temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]
			//1.- Configure the FTSR
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d2:	4b77      	ldr	r3, [pc, #476]	@ (8000ab0 <GPIO_Init+0x34c>)
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	7912      	ldrb	r2, [r2, #4]
 80008da:	4611      	mov	r1, r2
 80008dc:	2201      	movs	r2, #1
 80008de:	408a      	lsls	r2, r1
 80008e0:	4611      	mov	r1, r2
 80008e2:	4a73      	ldr	r2, [pc, #460]	@ (8000ab0 <GPIO_Init+0x34c>)
 80008e4:	430b      	orrs	r3, r1
 80008e6:	60d3      	str	r3, [r2, #12]
			//2.- Configure the RTSR
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e8:	4b71      	ldr	r3, [pc, #452]	@ (8000ab0 <GPIO_Init+0x34c>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	7912      	ldrb	r2, [r2, #4]
 80008f0:	4611      	mov	r1, r2
 80008f2:	2201      	movs	r2, #1
 80008f4:	408a      	lsls	r2, r1
 80008f6:	4611      	mov	r1, r2
 80008f8:	4a6d      	ldr	r2, [pc, #436]	@ (8000ab0 <GPIO_Init+0x34c>)
 80008fa:	430b      	orrs	r3, r1
 80008fc:	6093      	str	r3, [r2, #8]
		}

		// Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t tmp1 = 0,tmp2 = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	74fb      	strb	r3, [r7, #19]
 8000902:	2300      	movs	r3, #0
 8000904:	74bb      	strb	r3, [r7, #18]
		//Calculate the register to write PinNumber/ElementsInRegister
		tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	74fb      	strb	r3, [r7, #19]
		//Calculate position
		tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	791b      	ldrb	r3, [r3, #4]
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe07 	bl	8000530 <GPIO_BASEADDR_TO_CODE>
 8000922:	4603      	mov	r3, r0
 8000924:	747b      	strb	r3, [r7, #17]
		SYSCFG_PERI_CLOCK_ENABLE();
 8000926:	4b63      	ldr	r3, [pc, #396]	@ (8000ab4 <GPIO_Init+0x350>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a62      	ldr	r2, [pc, #392]	@ (8000ab4 <GPIO_Init+0x350>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
		//Select input for EXTI LINE
		SYSCFG->SYSCFG_EXTICR[tmp1] |= (portcode << (tmp2 * 4));
 8000932:	4a61      	ldr	r2, [pc, #388]	@ (8000ab8 <GPIO_Init+0x354>)
 8000934:	7cfb      	ldrb	r3, [r7, #19]
 8000936:	3302      	adds	r3, #2
 8000938:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800093c:	7c79      	ldrb	r1, [r7, #17]
 800093e:	7cbb      	ldrb	r3, [r7, #18]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	4618      	mov	r0, r3
 8000948:	495b      	ldr	r1, [pc, #364]	@ (8000ab8 <GPIO_Init+0x354>)
 800094a:	7cfb      	ldrb	r3, [r7, #19]
 800094c:	4302      	orrs	r2, r0
 800094e:	3302      	adds	r3, #2
 8000950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Enable the EXTI interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000954:	4b56      	ldr	r3, [pc, #344]	@ (8000ab0 <GPIO_Init+0x34c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	7912      	ldrb	r2, [r2, #4]
 800095c:	4611      	mov	r1, r2
 800095e:	2201      	movs	r2, #1
 8000960:	408a      	lsls	r2, r1
 8000962:	4611      	mov	r1, r2
 8000964:	4a52      	ldr	r2, [pc, #328]	@ (8000ab0 <GPIO_Init+0x34c>)
 8000966:	430b      	orrs	r3, r1
 8000968:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
	//2.- Configure the speed of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	799b      	ldrb	r3, [r3, #6]
 8000972:	461a      	mov	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIOx_OSPEEDR &= (0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clear first
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	2103      	movs	r1, #3
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	4619      	mov	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	400a      	ands	r2, r1
 800099a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->GPIOx_OSPEEDR |= temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6899      	ldr	r1, [r3, #8]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	609a      	str	r2, [r3, #8]

	temp = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
	//3.- Configure the PUPD of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	79db      	ldrb	r3, [r3, #7]
 80009b4:	461a      	mov	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIOx_PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clear first
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68da      	ldr	r2, [r3, #12]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	791b      	ldrb	r3, [r3, #4]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	2103      	movs	r1, #3
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	400a      	ands	r2, r1
 80009de:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->GPIOx_PUPDR |= temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68d9      	ldr	r1, [r3, #12]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	430a      	orrs	r2, r1
 80009ee:	60da      	str	r2, [r3, #12]

	temp = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
	//4.- Configure the OTYPE of GPIO pin
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7a1b      	ldrb	r3, [r3, #8]
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIOx_OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2301      	movs	r3, #1
 8000a12:	408b      	lsls	r3, r1
 8000a14:	43db      	mvns	r3, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	400a      	ands	r2, r1
 8000a1e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->GPIOx_OTYPER |= temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6859      	ldr	r1, [r3, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
	//5.- Configure the ALTF of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d135      	bne.n	8000aa8 <GPIO_Init+0x344>
	{
		uint8_t temp1= 0 ,temp2 = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	743b      	strb	r3, [r7, #16]
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; //Register Low or High
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	791b      	ldrb	r3, [r3, #4]
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; //Position
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	791b      	ldrb	r3, [r3, #4]
 8000a50:	f003 0307 	and.w	r3, r3, #7
 8000a54:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->GPIOx_AFR[temp1] &= ~(0xF << (4 * temp2));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	7c3a      	ldrb	r2, [r7, #16]
 8000a5c:	3208      	adds	r2, #8
 8000a5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	220f      	movs	r2, #15
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	7c3a      	ldrb	r2, [r7, #16]
 8000a76:	4001      	ands	r1, r0
 8000a78:	3208      	adds	r2, #8
 8000a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->GPIOx_AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	7c3a      	ldrb	r2, [r7, #16]
 8000a84:	3208      	adds	r2, #8
 8000a86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7a5b      	ldrb	r3, [r3, #9]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	4618      	mov	r0, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	7c3a      	ldrb	r2, [r7, #16]
 8000aa0:	4301      	orrs	r1, r0
 8000aa2:	3208      	adds	r2, #8
 8000aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013c00 	.word	0x40013c00
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40013800 	.word	0x40013800

08000abc <GPIO_ToggleOutputPin>:
{
	pGPIOx->GPIOx_ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_Reg_Def_t *pGPIOx, GPIO_Pin PinNumber)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
	pGPIOx->GPIOx_ODR ^= (1 << PinNumber);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	78fa      	ldrb	r2, [r7, #3]
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	405a      	eors	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	615a      	str	r2, [r3, #20]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <main>:

uint8_t current_task = 1;
uint32_t g_tick_count = 0;

int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

	/*GPIOs Initializations*/
	GPIOx_Init();
 8000ae8:	f000 f818 	bl	8000b1c <GPIOx_Init>

	/*Set MSP to point to scheduler task*/
	init_scheduler_stack(SCHEDULER_STACK_START);
 8000aec:	480a      	ldr	r0, [pc, #40]	@ (8000b18 <main+0x34>)
 8000aee:	f7ff fb89 	bl	8000204 <init_scheduler_stack>

	/* Initializing Tasks Stacks with Initial values */
	init_tasks_stack();
 8000af2:	f7ff fbbf 	bl	8000274 <init_tasks_stack>

	/* Switching to use PSP instead of MSP */
	switch_sp_to_psp();
 8000af6:	f7ff fc4b 	bl	8000390 <switch_sp_to_psp>

	/* Configuring SysTick timer
	 * 1 system timer interruption every 1ms */
	init_systick_timer(TICK_HZ);
 8000afa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afe:	f7ff fb87 	bl	8000210 <init_systick_timer>

	task1_handler(); // Launching Task1
 8000b02:	f000 f843 	bl	8000b8c <task1_handler>
	task2_handler();
 8000b06:	f000 f84b 	bl	8000ba0 <task2_handler>
	task3_handler();
 8000b0a:	f000 f853 	bl	8000bb4 <task3_handler>
	task4_handler();
 8000b0e:	f000 f85b 	bl	8000bc8 <task4_handler>

	while(1)
 8000b12:	bf00      	nop
 8000b14:	e7fd      	b.n	8000b12 <main+0x2e>
 8000b16:	bf00      	nop
 8000b18:	2001ec00 	.word	0x2001ec00

08000b1c <GPIOx_Init>:

	}
}

void GPIOx_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000b22:	2101      	movs	r1, #1
 8000b24:	4818      	ldr	r0, [pc, #96]	@ (8000b88 <GPIOx_Init+0x6c>)
 8000b26:	f7ff fd4d 	bl	80005c4 <GPIO_PeriClockControl>

	GPIO_Handle_t GPIO_LED_struct;

	memset(&GPIO_LED_struct, 0, sizeof(GPIO_LED_struct));
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	220c      	movs	r2, #12
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f880 	bl	8000c36 <memset>
	GPIO_LED_struct.pGPIOx = GPIOA;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <GPIOx_Init+0x6c>)
 8000b38:	607b      	str	r3, [r7, #4]
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	727b      	strb	r3, [r7, #9]
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	723b      	strb	r3, [r7, #8]
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	72bb      	strb	r3, [r7, #10]
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NOPUPD;
 8000b46:	2300      	movs	r3, #0
 8000b48:	72fb      	strb	r3, [r7, #11]
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUTPUT_PP;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	733b      	strb	r3, [r7, #12]
	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	737b      	strb	r3, [r7, #13]

	GPIO_Init(&GPIO_LED_struct); /* Initializing LED PA5 */
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fe05 	bl	8000764 <GPIO_Init>

	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_8; /* Initializing LED PA8 */
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIO_LED_struct);
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fdff 	bl	8000764 <GPIO_Init>

	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9; /* Initializing LED PA9 */
 8000b66:	2309      	movs	r3, #9
 8000b68:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIO_LED_struct);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fdf9 	bl	8000764 <GPIO_Init>

	GPIO_LED_struct.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_10; /* Initializing LED PA10 */
 8000b72:	230a      	movs	r3, #10
 8000b74:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIO_LED_struct);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fdf3 	bl	8000764 <GPIO_Init>

}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020000 	.word	0x40020000

08000b8c <task1_handler>:

void task1_handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 8000b90:	2105      	movs	r1, #5
 8000b92:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <task1_handler+0x10>)
 8000b94:	f7ff ff92 	bl	8000abc <GPIO_ToggleOutputPin>
 8000b98:	e7fa      	b.n	8000b90 <task1_handler+0x4>
 8000b9a:	bf00      	nop
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <task2_handler>:
		//task_delay(2000);
	}
}
void task2_handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_8);
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <task2_handler+0x10>)
 8000ba8:	f7ff ff88 	bl	8000abc <GPIO_ToggleOutputPin>
 8000bac:	e7fa      	b.n	8000ba4 <task2_handler+0x4>
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <task3_handler>:
	}
}
void task3_handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_9);
 8000bb8:	2109      	movs	r1, #9
 8000bba:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <task3_handler+0x10>)
 8000bbc:	f7ff ff7e 	bl	8000abc <GPIO_ToggleOutputPin>
 8000bc0:	e7fa      	b.n	8000bb8 <task3_handler+0x4>
 8000bc2:	bf00      	nop
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <task4_handler>:
	}
}
void task4_handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_10);
 8000bcc:	210a      	movs	r1, #10
 8000bce:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <task4_handler+0x10>)
 8000bd0:	f7ff ff74 	bl	8000abc <GPIO_ToggleOutputPin>
 8000bd4:	e7fa      	b.n	8000bcc <task4_handler+0x4>
 8000bd6:	bf00      	nop
 8000bd8:	40020000 	.word	0x40020000

08000bdc <idle_task>:
	}
}

void idle_task(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	while(1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <idle_task+0x4>

08000be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be4:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	@ (8000c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	@ (8000c30 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c12:	f000 f819 	bl	8000c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c16:	f7ff ff65 	bl	8000ae4 <main>

08000c1a <LoopForever>:

LoopForever:
  b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
  ldr   r0, =_estack
 8000c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c28:	08000cb0 	.word	0x08000cb0
  ldr r2, =_sbss
 8000c2c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c30:	20000074 	.word	0x20000074

08000c34 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>

08000c36 <memset>:
 8000c36:	4402      	add	r2, r0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d100      	bne.n	8000c40 <memset+0xa>
 8000c3e:	4770      	bx	lr
 8000c40:	f803 1b01 	strb.w	r1, [r3], #1
 8000c44:	e7f9      	b.n	8000c3a <memset+0x4>
	...

08000c48 <__libc_init_array>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8000c80 <__libc_init_array+0x38>)
 8000c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8000c84 <__libc_init_array+0x3c>)
 8000c4e:	1b64      	subs	r4, r4, r5
 8000c50:	10a4      	asrs	r4, r4, #2
 8000c52:	2600      	movs	r6, #0
 8000c54:	42a6      	cmp	r6, r4
 8000c56:	d109      	bne.n	8000c6c <__libc_init_array+0x24>
 8000c58:	4d0b      	ldr	r5, [pc, #44]	@ (8000c88 <__libc_init_array+0x40>)
 8000c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8000c8c <__libc_init_array+0x44>)
 8000c5c:	f000 f818 	bl	8000c90 <_init>
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	10a4      	asrs	r4, r4, #2
 8000c64:	2600      	movs	r6, #0
 8000c66:	42a6      	cmp	r6, r4
 8000c68:	d105      	bne.n	8000c76 <__libc_init_array+0x2e>
 8000c6a:	bd70      	pop	{r4, r5, r6, pc}
 8000c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c70:	4798      	blx	r3
 8000c72:	3601      	adds	r6, #1
 8000c74:	e7ee      	b.n	8000c54 <__libc_init_array+0xc>
 8000c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7a:	4798      	blx	r3
 8000c7c:	3601      	adds	r6, #1
 8000c7e:	e7f2      	b.n	8000c66 <__libc_init_array+0x1e>
 8000c80:	08000ca8 	.word	0x08000ca8
 8000c84:	08000ca8 	.word	0x08000ca8
 8000c88:	08000ca8 	.word	0x08000ca8
 8000c8c:	08000cac 	.word	0x08000cac

08000c90 <_init>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	bf00      	nop
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr

08000c9c <_fini>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	bf00      	nop
 8000ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca2:	bc08      	pop	{r3}
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	4770      	bx	lr
